{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentageAmount",
          "type": "uint256"
        }
      ],
      "name": "EthTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "LPClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "infinityToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LPQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "address",
          "name": "infinityToken",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "tokenPair",
          "type": "address"
        },
        {
          "internalType": "contract IFeeDistributor",
          "name": "feeDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "stakeDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "donationShare",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "purchaseFee",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableLPForceUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceUnlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "getLockedLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "lockedLPLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseLP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "purchaseLPFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "queueCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "infinityToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "donationShare",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "purchaseFee",
          "type": "uint8"
        }
      ],
      "name": "seed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "donationShare",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "purchaseFee",
          "type": "uint8"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f8ca60e2fee8e1db0d1bb636cb2e6675ef23eaabb864f0b89713a2d7d423bce",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1401618",
    "logsBloom": "0x
    "blockHash": "0x5e13b7c67d72446f0bb91d9ae5c23ce513f2fe663d2158c75861e41e18a0ac41",
    "transactionHash": "0x6f8ca60e2fee8e1db0d1bb636cb2e6675ef23eaabb864f0b89713a2d7d423bce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x6f8ca60e2fee8e1db0d1bb636cb2e6675ef23eaabb864f0b89713a2d7d423bce",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5e13b7c67d72446f0bb91d9ae5c23ce513f2fe663d2158c75861e41e18a0ac41"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1401618",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "50935558cf5835f525f697d3157617bd",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageAmount\",\"type\":\"uint256\"}],\"name\":\"EthTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"LPClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"infinityToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LPQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"infinityToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"tokenPair\",\"type\":\"address\"},{\"internalType\":\"contract IFeeDistributor\",\"name\":\"feeDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakeDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"donationShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"purchaseFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLPForceUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUnlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLockedLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lockedLPLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"purchaseLPFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"queueCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"infinityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"donationShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"purchaseFee\",\"type\":\"uint8\"}],\"name\":\"seed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"donationShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"purchaseFee\",\"type\":\"uint8\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"EthTransferred(address,uint256,uint256)\":{\"notice\":\"Emitted when purchaseLP() is called to track ETH amounts \"},\"LPClaimed(address,uint256,uint256,uint256,bool)\":{\"notice\":\"Emitted when claimLP() is called \"},\"LPQueued(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when purchaseLP() is called and LP tokens minted \"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/LiquidVault.sol\":\"LiquidVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa95234db08e761bb358798187dbfa2194379e06ee7ab5c3fe147b21481e5d59d\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"interface IFeeDistributor {\\n  function distributeFees() external;\\n}\",\"keccak256\":\"0x8cace30edd60bc477fb3fe56655259d416d12002de3ce4e25505088334365eb2\"},\"contracts/vaults/LiquidVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/IFeeDistributor.sol\\\";\\n\\ncontract LiquidVault is Ownable {\\n  /** Emitted when purchaseLP() is called to track ETH amounts */\\n  event EthTransferred(\\n      address from,\\n      uint amount,\\n      uint percentageAmount\\n  );\\n\\n  /** Emitted when purchaseLP() is called and LP tokens minted */\\n  event LPQueued(\\n      address holder,\\n      uint amount,\\n      uint eth,\\n      uint infinityToken,\\n      uint timestamp\\n  );\\n\\n  /** Emitted when claimLP() is called */\\n  event LPClaimed(\\n      address holder,\\n      uint amount,\\n      uint timestamp,\\n      uint exitFee,\\n      bool claimed\\n  );\\n\\n  struct LPbatch {\\n      address holder;\\n      uint amount;\\n      uint timestamp;\\n      bool claimed;\\n  }\\n\\n  struct LiquidVaultConfig {\\n      address infinityToken;\\n      IUniswapV2Router02 uniswapRouter;\\n      IUniswapV2Pair tokenPair;\\n      IFeeDistributor feeDistributor;\\n      address weth;\\n      address payable feeReceiver;\\n      uint32 stakeDuration;\\n      uint8 donationShare; //0-100\\n      uint8 purchaseFee; //0-100\\n  }\\n  \\n  bool public forceUnlock;\\n  bool private locked;\\n\\n  modifier lock {\\n      require(!locked, \\\"LiquidVault: reentrancy violation\\\");\\n      locked = true;\\n      _;\\n      locked = false;\\n  }\\n\\n  LiquidVaultConfig public config;\\n\\n  mapping(address => LPbatch[]) public lockedLP;\\n  mapping(address => uint) public queueCounter;\\n\\n  function seed(\\n      uint32 duration,\\n      address infinityToken,\\n      address uniswapPair,\\n      address uniswapRouter,\\n      address feeDistributor,\\n      address payable feeReceiver,\\n      uint8 donationShare, // LP Token\\n      uint8 purchaseFee // ETH\\n  ) public onlyOwner {\\n      config.infinityToken = infinityToken;\\n      config.uniswapRouter = IUniswapV2Router02(uniswapRouter);\\n      config.tokenPair = IUniswapV2Pair(uniswapPair);\\n      config.feeDistributor = IFeeDistributor(feeDistributor);\\n      config.weth = config.uniswapRouter.WETH();\\n      setFeeReceiverAddress(feeReceiver);\\n      setParameters(duration, donationShare, purchaseFee);\\n  }\\n\\n  function getStakeDuration() public view returns (uint) {\\n      return forceUnlock ? 0 : config.stakeDuration;\\n  }\\n\\n  // Could not be canceled if activated\\n  function enableLPForceUnlock() public onlyOwner {\\n      forceUnlock = true;\\n  }\\n\\n  function setFeeReceiverAddress(address payable feeReceiver) public onlyOwner {\\n      require(\\n          feeReceiver != address(0),\\n          \\\"LiquidVault: ETH receiver is zero address\\\"\\n      );\\n\\n      config.feeReceiver = feeReceiver;\\n  }\\n\\n  function setParameters(uint32 duration, uint8 donationShare, uint8 purchaseFee)\\n      public\\n      onlyOwner\\n  {\\n      require(\\n          donationShare <= 100,\\n          \\\"LiquidVault: donation share % between 0 and 100\\\"\\n      );\\n      require(\\n          purchaseFee <= 100,\\n          \\\"LiquidVault: purchase fee share % between 0 and 100\\\"\\n      );\\n\\n      config.stakeDuration = duration * 1 days;\\n      config.donationShare = donationShare;\\n      config.purchaseFee = purchaseFee;\\n  }\\n\\n  function purchaseLPFor(address beneficiary) public payable lock {\\n      config.feeDistributor.distributeFees();\\n      require(msg.value > 0, \\\"LiquidVault: ETH required to mint INFINITY LP\\\");\\n\\n      uint feeValue = (config.purchaseFee * msg.value) / 100;\\n      uint exchangeValue = msg.value - feeValue;\\n\\n      (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();\\n\\n      uint infinityRequired;\\n\\n      if (address(config.infinityToken) < address(config.weth)) {\\n          infinityRequired = config.uniswapRouter.quote(\\n              exchangeValue,\\n              reserve2,\\n              reserve1\\n          );\\n      } else {\\n          infinityRequired = config.uniswapRouter.quote(\\n              exchangeValue,\\n              reserve1,\\n              reserve2\\n          );\\n      }\\n\\n      uint balance = IERC20(config.infinityToken).balanceOf(address(this));\\n      require(\\n          balance >= infinityRequired,\\n          \\\"LiquidVault: insufficient INFINITY tokens in LiquidVault\\\"\\n      );\\n\\n      IWETH(config.weth).deposit{ value: exchangeValue }();\\n      address tokenPairAddress = address(config.tokenPair);\\n      IWETH(config.weth).transfer(tokenPairAddress, exchangeValue);\\n      IERC20(config.infinityToken).transfer(\\n          tokenPairAddress,\\n          infinityRequired\\n      );\\n\\n      uint liquidityCreated = config.tokenPair.mint(address(this));\\n      config.feeReceiver.transfer(feeValue);\\n\\n      lockedLP[beneficiary].push(\\n          LPbatch({\\n              holder: beneficiary,\\n              amount: liquidityCreated,\\n              timestamp: block.timestamp,\\n              claimed: false\\n          })\\n      );\\n\\n      emit LPQueued(\\n          beneficiary,\\n          liquidityCreated,\\n          exchangeValue,\\n          infinityRequired,\\n          block.timestamp\\n      );\\n\\n      emit EthTransferred(msg.sender, exchangeValue, feeValue);\\n  }\\n\\n  //send ETH to match with INFINITY tokens in LiquidVault\\n  function purchaseLP() public payable {\\n      purchaseLPFor(msg.sender);\\n  }\\n\\n  function claimLP() public {\\n      uint next = queueCounter[msg.sender];\\n      require(\\n          next < lockedLP[msg.sender].length,\\n          \\\"LiquidVault: nothing to claim.\\\"\\n      );\\n      LPbatch storage batch = lockedLP[msg.sender][next];\\n      require(\\n          block.timestamp - batch.timestamp > getStakeDuration(),\\n          \\\"LiquidVault: LP still locked.\\\"\\n      );\\n      next++;\\n      queueCounter[msg.sender] = next;\\n      uint donation = (config.donationShare * batch.amount) / 100;\\n      batch.claimed = true;\\n      emit LPClaimed(msg.sender, batch.amount, block.timestamp, donation, batch.claimed);\\n      require(\\n          config.tokenPair.transfer(address(0), donation),\\n          \\\"LiquidVault: donation transfer failed in LP claim.\\\"\\n      );\\n      require(\\n          config.tokenPair.transfer(batch.holder, batch.amount - donation),\\n          \\\"LiquidVault: transfer failed in LP claim.\\\"\\n      );\\n  }\\n\\n  function lockedLPLength(address holder) public view returns (uint) {\\n      return lockedLP[holder].length;\\n  }\\n\\n  function getLockedLP(address holder, uint position)\\n      public\\n      view\\n      returns (\\n          address,\\n          uint,\\n          uint,\\n          bool\\n      )\\n  {\\n      LPbatch memory batch = lockedLP[holder][position];\\n      return (batch.holder, batch.amount, batch.timestamp, batch.claimed);\\n  }\\n}\",\"keccak256\":\"0xf470245efe80b6887c8d5f7a5408c46fca8b4cb1cfcaac363281ce26c031694c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6117ef8061007d6000396000f3fe6080604052600436106100fe5760003560e01c806387c9082d11610095578063b4a9710111610064578063b4a971011461037c578063bd901bdd146103af578063de44391a146103d5578063dfbcaeb9146103ea578063f2fde38b1461045b576100fe565b806387c9082d146102be5780638da5cb5b146103035780639c4e3148146103345780639f1bfc6c14610367576100fe565b8063715018a6116100d1578063715018a6146101ff57806374d6588b1461021457806379502c551461021c5780637965c96714610295576100fe565b80631a5a3794146101035780631ebaaf66146101465780631faaa66d146101b15780635536998c146101ea575b600080fd5b34801561010f57600080fd5b506101446004803603606081101561012657600080fd5b5063ffffffff8135169060ff6020820135811691604001351661048e565b005b34801561015257600080fd5b5061017f6004803603604081101561016957600080fd5b506001600160a01b0381351690602001356105c8565b604080516001600160a01b03909516855260208501939093528383019190915215156060830152519081900360800190f35b3480156101bd57600080fd5b5061017f600480360360408110156101d457600080fd5b506001600160a01b03813516906020013561065e565b3480156101f657600080fd5b506101446106b1565b34801561020b57600080fd5b50610144610728565b6101446107d4565b34801561022857600080fd5b506102316107df565b604080516001600160a01b039a8b168152988a1660208a01529689168888015294881660608801529287166080870152951660a085015263ffffffff90941660c084015260ff93841660e08401529092166101008201529051908190036101200190f35b3480156102a157600080fd5b506102aa610835565b604080519115158252519081900360200190f35b3480156102ca57600080fd5b506102f1600480360360208110156102e157600080fd5b50356001600160a01b0316610845565b60408051918252519081900360200190f35b34801561030f57600080fd5b50610318610860565b604080516001600160a01b039092168252519081900360200190f35b34801561034057600080fd5b506101446004803603602081101561035757600080fd5b50356001600160a01b031661086f565b34801561037357600080fd5b506102f1610938565b34801561038857600080fd5b506102f16004803603602081101561039f57600080fd5b50356001600160a01b031661096d565b610144600480360360208110156103c557600080fd5b50356001600160a01b031661097f565b3480156103e157600080fd5b50610144611062565b3480156103f657600080fd5b50610144600480360361010081101561040e57600080fd5b5063ffffffff813516906001600160a01b03602082013581169160408101358216916060820135811691608081013582169160a0820135169060ff60c082013581169160e0013516611381565b34801561046757600080fd5b506101446004803603602081101561047e57600080fd5b50356001600160a01b03166114ce565b6104966115d0565b6001600160a01b03166104a7610860565b6001600160a01b0316146104f0576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b60648260ff1611156105335760405162461bcd60e51b815260040180806020018281038252602f815260200180611608602f913960400191505060405180910390fd5b60648160ff1611156105765760405162461bcd60e51b815260040180806020018281038252603381526020018061173a6033913960400191505060405180910390fd5b6006805463ffffffff60a01b1916600160a01b620151809590950263ffffffff16949094029390931760ff60c01b1916600160c01b60ff938416021760ff60c81b1916600160c81b9190921602179055565b6000806000806105d66115d4565b6001600160a01b03871660009081526007602052604090208054879081106105fa57fe5b60009182526020918290206040805160808101825260049390930290910180546001600160a01b03168084526001820154948401859052600282015492840183905260039091015460ff16151560609093018390529a929950975095509350505050565b6007602052816000526040600020818154811061067a57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925060ff1684565b6106b96115d0565b6001600160a01b03166106ca610860565b6001600160a01b031614610713576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b179055565b6107306115d0565b6001600160a01b0316610741610860565b6001600160a01b03161461078a576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6107dd3361097f565b565b6001546002546003546004546005546006546001600160a01b03958616959485169493841693928316929182169181169063ffffffff600160a01b8204169060ff600160c01b8204811691600160c81b90041689565b600054600160a01b900460ff1681565b6001600160a01b031660009081526007602052604090205490565b6000546001600160a01b031690565b6108776115d0565b6001600160a01b0316610888610860565b6001600160a01b0316146108d1576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b6001600160a01b0381166109165760405162461bcd60e51b81526004018080602001828103825260298152602001806116df6029913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008054600160a01b900460ff1661095f57600654600160a01b900463ffffffff16610962565b60005b63ffffffff16905090565b60086020526000908152604090205481565b600054600160a81b900460ff16156109c85760405162461bcd60e51b81526004018080602001828103825260218152602001806116be6021913960400191505060405180910390fd5b6000805460ff60a81b1916600160a81b17815560048054604080516305dabd6960e51b815290516001600160a01b039092169363bb57ad209382810193919282900301818387803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b5050505060003411610a735760405162461bcd60e51b815260040180806020018281038252602d81526020018061178d602d913960400191505060405180910390fd5b60065460035460408051630240bc6b60e21b81529051606434600160c81b90950460ff16850204938490039260009283926001600160a01b0390921691630902f1ac91600480820192606092909190829003018186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d6060811015610b0057600080fd5b5080516020909101516005546001546dffffffffffffffffffffffffffff93841695509290911692506000916001600160a01b0391821691161015610bcc5760025460408051632b58577b60e21b815260048101879052602481018590526044810186905290516001600160a01b039092169163ad615dec91606480820192602092909190829003018186803b158015610b9957600080fd5b505afa158015610bad573d6000803e3d6000fd5b505050506040513d6020811015610bc357600080fd5b50519050610c55565b60025460408051632b58577b60e21b815260048101879052602481018690526044810185905290516001600160a01b039092169163ad615dec91606480820192602092909190829003018186803b158015610c2657600080fd5b505afa158015610c3a573d6000803e3d6000fd5b505050506040513d6020811015610c5057600080fd5b505190505b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d6020811015610cca57600080fd5b5051905081811015610d0d5760405162461bcd60e51b81526004018080602001828103825260388152602001806116866038913960400191505060405180910390fd5b60055460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918891600482810192600092919082900301818588803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b50506003546005546040805163a9059cbb60e01b81526001600160a01b0393841660048201819052602482018d9052915191965092909116935063a9059cbb925060448083019260209291908290030181600087803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b50506001546040805163a9059cbb60e01b81526001600160a01b038481166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610e4c57600080fd5b505af1158015610e60573d6000803e3d6000fd5b505050506040513d6020811015610e7657600080fd5b5050600354604080516335313c2160e11b815230600482015290516000926001600160a01b031691636a62784291602480830192602092919082900301818787803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050506040513d6020811015610eee57600080fd5b50516006546040519192506001600160a01b03169089156108fc02908a906000818181858888f19350505050158015610f2b573d6000803e3d6000fd5b506001600160a01b0389811660008181526007602090815260408083208151608080820184528682528185018981524283860181815260608086018a8152875460018082018a55988c529a8a902096516004909b0290960180546001600160a01b0319169a909c16999099178b559151948a019490945551600289015590516003909701805460ff19169715159790971790965581519485529184018690528381018c90529183018890529282019290925290517fe7660232e29d90e682443fb9547e347cb9bf2e0819d4b6c656ad7230d4f100e29160a0908290030190a160408051338152602081018990528082018a905290517f33d1666e046acf93d35357bd3ae33df3095c40a5a5de75819698072d97121d289181900360600190a150506000805460ff60a81b1916905550505050505050565b3360009081526008602090815260408083205460079092529091205481106110d1576040805162461bcd60e51b815260206004820152601e60248201527f4c69717569645661756c743a206e6f7468696e6720746f20636c61696d2e0000604482015290519081900360640190fd5b3360009081526007602052604081208054839081106110ec57fe5b90600052602060002090600402019050611104610938565b816002015442031161115d576040805162461bcd60e51b815260206004820152601d60248201527f4c69717569645661756c743a204c50207374696c6c206c6f636b65642e000000604482015290519081900360640190fd5b336000818152600860209081526040918290206001958601908190558486015460065460038701805460ff19169098179788905584519586529285018190524285850152606460ff600160c01b90940484169091020460608501819052959091161515608084015290519093917feb9f916af767932dafd78f28d270d1975fefe77bcb9d160cc653bf9cfc3599719160a0918190039190910190a16003546040805163a9059cbb60e01b81526000600482018190526024820185905291516001600160a01b039093169263a9059cbb92604480840193602093929083900390910190829087803b15801561125057600080fd5b505af1158015611264573d6000803e3d6000fd5b505050506040513d602081101561127a57600080fd5b50516112b75760405162461bcd60e51b81526004018080602001828103825260328152602001806117086032913960400191505060405180910390fd5b600354825460018401546040805163a9059cbb60e01b81526001600160a01b03938416600482015291859003602483015251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561131557600080fd5b505af1158015611329573d6000803e3d6000fd5b505050506040513d602081101561133f57600080fd5b505161137c5760405162461bcd60e51b81526004018080602001828103825260298152602001806116376029913960400191505060405180910390fd5b505050565b6113896115d0565b6001600160a01b031661139a610860565b6001600160a01b0316146113e3576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b600180546001600160a01b03199081166001600160a01b038a81169190911790925560028054821688841617908190556003805483168a851617905560048054909216878416178255604080516315ab88c960e31b81529051919093169263ad5c46489281810192602092909190829003018186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506040513d602081101561148f57600080fd5b5051600580546001600160a01b0319166001600160a01b039092169190911790556114b98361086f565b6114c488838361048e565b5050505050505050565b6114d66115d0565b6001600160a01b03166114e7610860565b6001600160a01b031614611530576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b6001600160a01b0381166115755760405162461bcd60e51b81526004018080602001828103825260268152602001806116606026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600015158152509056fe4c69717569645661756c743a20646f6e6174696f6e2073686172652025206265747765656e203020616e64203130304c69717569645661756c743a207472616e73666572206661696c656420696e204c5020636c61696d2e4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734c69717569645661756c743a20696e73756666696369656e7420494e46494e49545920746f6b656e7320696e204c69717569645661756c744c69717569645661756c743a207265656e7472616e63792076696f6c6174696f6e4c69717569645661756c743a20455448207265636569766572206973207a65726f20616464726573734c69717569645661756c743a20646f6e6174696f6e207472616e73666572206661696c656420696e204c5020636c61696d2e4c69717569645661756c743a207075726368617365206665652073686172652025206265747765656e203020616e64203130304f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724c69717569645661756c743a2045544820726571756972656420746f206d696e7420494e46494e495459204c50a2646970667358221220ed8981c7d680570e386bd9dbb5e01636c5c73416dddecb348c99f9258c7a286a64736f6c63430007040033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c806387c9082d11610095578063b4a9710111610064578063b4a971011461037c578063bd901bdd146103af578063de44391a146103d5578063dfbcaeb9146103ea578063f2fde38b1461045b576100fe565b806387c9082d146102be5780638da5cb5b146103035780639c4e3148146103345780639f1bfc6c14610367576100fe565b8063715018a6116100d1578063715018a6146101ff57806374d6588b1461021457806379502c551461021c5780637965c96714610295576100fe565b80631a5a3794146101035780631ebaaf66146101465780631faaa66d146101b15780635536998c146101ea575b600080fd5b34801561010f57600080fd5b506101446004803603606081101561012657600080fd5b5063ffffffff8135169060ff6020820135811691604001351661048e565b005b34801561015257600080fd5b5061017f6004803603604081101561016957600080fd5b506001600160a01b0381351690602001356105c8565b604080516001600160a01b03909516855260208501939093528383019190915215156060830152519081900360800190f35b3480156101bd57600080fd5b5061017f600480360360408110156101d457600080fd5b506001600160a01b03813516906020013561065e565b3480156101f657600080fd5b506101446106b1565b34801561020b57600080fd5b50610144610728565b6101446107d4565b34801561022857600080fd5b506102316107df565b604080516001600160a01b039a8b168152988a1660208a01529689168888015294881660608801529287166080870152951660a085015263ffffffff90941660c084015260ff93841660e08401529092166101008201529051908190036101200190f35b3480156102a157600080fd5b506102aa610835565b604080519115158252519081900360200190f35b3480156102ca57600080fd5b506102f1600480360360208110156102e157600080fd5b50356001600160a01b0316610845565b60408051918252519081900360200190f35b34801561030f57600080fd5b50610318610860565b604080516001600160a01b039092168252519081900360200190f35b34801561034057600080fd5b506101446004803603602081101561035757600080fd5b50356001600160a01b031661086f565b34801561037357600080fd5b506102f1610938565b34801561038857600080fd5b506102f16004803603602081101561039f57600080fd5b50356001600160a01b031661096d565b610144600480360360208110156103c557600080fd5b50356001600160a01b031661097f565b3480156103e157600080fd5b50610144611062565b3480156103f657600080fd5b50610144600480360361010081101561040e57600080fd5b5063ffffffff813516906001600160a01b03602082013581169160408101358216916060820135811691608081013582169160a0820135169060ff60c082013581169160e0013516611381565b34801561046757600080fd5b506101446004803603602081101561047e57600080fd5b50356001600160a01b03166114ce565b6104966115d0565b6001600160a01b03166104a7610860565b6001600160a01b0316146104f0576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b60648260ff1611156105335760405162461bcd60e51b815260040180806020018281038252602f815260200180611608602f913960400191505060405180910390fd5b60648160ff1611156105765760405162461bcd60e51b815260040180806020018281038252603381526020018061173a6033913960400191505060405180910390fd5b6006805463ffffffff60a01b1916600160a01b620151809590950263ffffffff16949094029390931760ff60c01b1916600160c01b60ff938416021760ff60c81b1916600160c81b9190921602179055565b6000806000806105d66115d4565b6001600160a01b03871660009081526007602052604090208054879081106105fa57fe5b60009182526020918290206040805160808101825260049390930290910180546001600160a01b03168084526001820154948401859052600282015492840183905260039091015460ff16151560609093018390529a929950975095509350505050565b6007602052816000526040600020818154811061067a57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925060ff1684565b6106b96115d0565b6001600160a01b03166106ca610860565b6001600160a01b031614610713576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b179055565b6107306115d0565b6001600160a01b0316610741610860565b6001600160a01b03161461078a576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6107dd3361097f565b565b6001546002546003546004546005546006546001600160a01b03958616959485169493841693928316929182169181169063ffffffff600160a01b8204169060ff600160c01b8204811691600160c81b90041689565b600054600160a01b900460ff1681565b6001600160a01b031660009081526007602052604090205490565b6000546001600160a01b031690565b6108776115d0565b6001600160a01b0316610888610860565b6001600160a01b0316146108d1576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b6001600160a01b0381166109165760405162461bcd60e51b81526004018080602001828103825260298152602001806116df6029913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008054600160a01b900460ff1661095f57600654600160a01b900463ffffffff16610962565b60005b63ffffffff16905090565b60086020526000908152604090205481565b600054600160a81b900460ff16156109c85760405162461bcd60e51b81526004018080602001828103825260218152602001806116be6021913960400191505060405180910390fd5b6000805460ff60a81b1916600160a81b17815560048054604080516305dabd6960e51b815290516001600160a01b039092169363bb57ad209382810193919282900301818387803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b5050505060003411610a735760405162461bcd60e51b815260040180806020018281038252602d81526020018061178d602d913960400191505060405180910390fd5b60065460035460408051630240bc6b60e21b81529051606434600160c81b90950460ff16850204938490039260009283926001600160a01b0390921691630902f1ac91600480820192606092909190829003018186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d6060811015610b0057600080fd5b5080516020909101516005546001546dffffffffffffffffffffffffffff93841695509290911692506000916001600160a01b0391821691161015610bcc5760025460408051632b58577b60e21b815260048101879052602481018590526044810186905290516001600160a01b039092169163ad615dec91606480820192602092909190829003018186803b158015610b9957600080fd5b505afa158015610bad573d6000803e3d6000fd5b505050506040513d6020811015610bc357600080fd5b50519050610c55565b60025460408051632b58577b60e21b815260048101879052602481018690526044810185905290516001600160a01b039092169163ad615dec91606480820192602092909190829003018186803b158015610c2657600080fd5b505afa158015610c3a573d6000803e3d6000fd5b505050506040513d6020811015610c5057600080fd5b505190505b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d6020811015610cca57600080fd5b5051905081811015610d0d5760405162461bcd60e51b81526004018080602001828103825260388152602001806116866038913960400191505060405180910390fd5b60055460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918891600482810192600092919082900301818588803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b50506003546005546040805163a9059cbb60e01b81526001600160a01b0393841660048201819052602482018d9052915191965092909116935063a9059cbb925060448083019260209291908290030181600087803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b50506001546040805163a9059cbb60e01b81526001600160a01b038481166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610e4c57600080fd5b505af1158015610e60573d6000803e3d6000fd5b505050506040513d6020811015610e7657600080fd5b5050600354604080516335313c2160e11b815230600482015290516000926001600160a01b031691636a62784291602480830192602092919082900301818787803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050506040513d6020811015610eee57600080fd5b50516006546040519192506001600160a01b03169089156108fc02908a906000818181858888f19350505050158015610f2b573d6000803e3d6000fd5b506001600160a01b0389811660008181526007602090815260408083208151608080820184528682528185018981524283860181815260608086018a8152875460018082018a55988c529a8a902096516004909b0290960180546001600160a01b0319169a909c16999099178b559151948a019490945551600289015590516003909701805460ff19169715159790971790965581519485529184018690528381018c90529183018890529282019290925290517fe7660232e29d90e682443fb9547e347cb9bf2e0819d4b6c656ad7230d4f100e29160a0908290030190a160408051338152602081018990528082018a905290517f33d1666e046acf93d35357bd3ae33df3095c40a5a5de75819698072d97121d289181900360600190a150506000805460ff60a81b1916905550505050505050565b3360009081526008602090815260408083205460079092529091205481106110d1576040805162461bcd60e51b815260206004820152601e60248201527f4c69717569645661756c743a206e6f7468696e6720746f20636c61696d2e0000604482015290519081900360640190fd5b3360009081526007602052604081208054839081106110ec57fe5b90600052602060002090600402019050611104610938565b816002015442031161115d576040805162461bcd60e51b815260206004820152601d60248201527f4c69717569645661756c743a204c50207374696c6c206c6f636b65642e000000604482015290519081900360640190fd5b336000818152600860209081526040918290206001958601908190558486015460065460038701805460ff19169098179788905584519586529285018190524285850152606460ff600160c01b90940484169091020460608501819052959091161515608084015290519093917feb9f916af767932dafd78f28d270d1975fefe77bcb9d160cc653bf9cfc3599719160a0918190039190910190a16003546040805163a9059cbb60e01b81526000600482018190526024820185905291516001600160a01b039093169263a9059cbb92604480840193602093929083900390910190829087803b15801561125057600080fd5b505af1158015611264573d6000803e3d6000fd5b505050506040513d602081101561127a57600080fd5b50516112b75760405162461bcd60e51b81526004018080602001828103825260328152602001806117086032913960400191505060405180910390fd5b600354825460018401546040805163a9059cbb60e01b81526001600160a01b03938416600482015291859003602483015251919092169163a9059cbb9160448083019260209291908290030181600087803b15801561131557600080fd5b505af1158015611329573d6000803e3d6000fd5b505050506040513d602081101561133f57600080fd5b505161137c5760405162461bcd60e51b81526004018080602001828103825260298152602001806116376029913960400191505060405180910390fd5b505050565b6113896115d0565b6001600160a01b031661139a610860565b6001600160a01b0316146113e3576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b600180546001600160a01b03199081166001600160a01b038a81169190911790925560028054821688841617908190556003805483168a851617905560048054909216878416178255604080516315ab88c960e31b81529051919093169263ad5c46489281810192602092909190829003018186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506040513d602081101561148f57600080fd5b5051600580546001600160a01b0319166001600160a01b039092169190911790556114b98361086f565b6114c488838361048e565b5050505050505050565b6114d66115d0565b6001600160a01b03166114e7610860565b6001600160a01b031614611530576040805162461bcd60e51b8152602060048201819052602482015260008051602061176d833981519152604482015290519081900360640190fd5b6001600160a01b0381166115755760405162461bcd60e51b81526004018080602001828103825260268152602001806116606026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600015158152509056fe4c69717569645661756c743a20646f6e6174696f6e2073686172652025206265747765656e203020616e64203130304c69717569645661756c743a207472616e73666572206661696c656420696e204c5020636c61696d2e4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734c69717569645661756c743a20696e73756666696369656e7420494e46494e49545920746f6b656e7320696e204c69717569645661756c744c69717569645661756c743a207265656e7472616e63792076696f6c6174696f6e4c69717569645661756c743a20455448207265636569766572206973207a65726f20616464726573734c69717569645661756c743a20646f6e6174696f6e207472616e73666572206661696c656420696e204c5020636c61696d2e4c69717569645661756c743a207075726368617365206665652073686172652025206265747765656e203020616e64203130304f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724c69717569645661756c743a2045544820726571756972656420746f206d696e7420494e46494e495459204c50a2646970667358221220ed8981c7d680570e386bd9dbb5e01636c5c73416dddecb348c99f9258c7a286a64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "EthTransferred(address,uint256,uint256)": {
        "notice": "Emitted when purchaseLP() is called to track ETH amounts "
      },
      "LPClaimed(address,uint256,uint256,uint256,bool)": {
        "notice": "Emitted when claimLP() is called "
      },
      "LPQueued(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when purchaseLP() is called and LP tokens minted "
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5821,
        "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
        "label": "forceUnlock",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5823,
        "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
        "label": "locked",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5843,
        "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(LiquidVaultConfig)5819_storage"
      },
      {
        "astId": 5848,
        "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
        "label": "lockedLP",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(LPbatch)5800_storage)dyn_storage)"
      },
      {
        "astId": 5852,
        "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
        "label": "queueCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LPbatch)5800_storage)dyn_storage": {
        "base": "t_struct(LPbatch)5800_storage",
        "encoding": "dynamic_array",
        "label": "struct LiquidVault.LPbatch[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeDistributor)4407": {
        "encoding": "inplace",
        "label": "contract IFeeDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)1205": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)1601": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LPbatch)5800_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidVault.LPbatch[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LPbatch)5800_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LPbatch)5800_storage": {
        "encoding": "inplace",
        "label": "struct LiquidVault.LPbatch",
        "members": [
          {
            "astId": 5793,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "holder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5795,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5797,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5799,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LiquidVaultConfig)5819_storage": {
        "encoding": "inplace",
        "label": "struct LiquidVault.LiquidVaultConfig",
        "members": [
          {
            "astId": 5802,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "infinityToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5804,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "uniswapRouter",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IUniswapV2Router02)1601"
          },
          {
            "astId": 5806,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "tokenPair",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IUniswapV2Pair)1205"
          },
          {
            "astId": 5808,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "feeDistributor",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IFeeDistributor)4407"
          },
          {
            "astId": 5810,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "weth",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5812,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "feeReceiver",
            "offset": 0,
            "slot": "5",
            "type": "t_address_payable"
          },
          {
            "astId": 5814,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "stakeDuration",
            "offset": 20,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 5816,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "donationShare",
            "offset": 24,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 5818,
            "contract": "contracts/vaults/LiquidVault.sol:LiquidVault",
            "label": "purchaseFee",
            "offset": 25,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}