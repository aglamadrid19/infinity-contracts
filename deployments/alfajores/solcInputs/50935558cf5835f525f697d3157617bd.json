{
  "language": "Solidity",
  "sources": {
    "contracts/FeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/IInfinityProtocol.sol\";\n\ncontract FeeDistributor is Ownable {\n    using SafeMath for uint;\n\n    struct FeeRecipient {\n        address liquidVault;\n        address secondaryAddress;\n        uint256 liquidVaultShare; //percentage between 0 and 100\n        uint256 burnPercentage;\n    }\n    \n    IInfinityProtocol public infinity;\n    FeeRecipient public recipients;\n\n    bool public initialized;\n\n    uint private constant MINIMUM_AMOUNT = 1e8;\n\n    modifier seeded {\n        require(\n            initialized,\n            \"FeeDistributor: Fees cannot be distributed until Distributor seeded.\"\n        );\n        _;\n    }\n\n    function seed(\n        address _infinity,\n        address _vault,\n        address _secondaryAddress,\n        uint _liquidVaultShare,\n        uint _burnPercentage\n    ) external onlyOwner {\n        require(\n            _liquidVaultShare.add(_burnPercentage) <= 100,\n            \"FeeDistributor: liquidVault + burnPercentage incorrect sets\"\n        );\n        infinity = IInfinityProtocol(_infinity);\n        recipients.liquidVault = _vault;\n        recipients.secondaryAddress = _secondaryAddress;\n        recipients.liquidVaultShare = _liquidVaultShare;\n        recipients.burnPercentage = _burnPercentage;\n        initialized = true;\n    }\n\n    function distributeFees() external seeded {\n        uint balance = infinity.balanceOf(address(this));\n\n        if (balance < MINIMUM_AMOUNT) {\n            return;\n        }\n\n        uint liquidShare;\n        uint burningShare;\n        uint secondaryShare;\n\n        if (recipients.liquidVaultShare > 0) {\n            liquidShare = recipients.liquidVaultShare.mul(balance).div(100);\n\n            require(\n                infinity.transfer(recipients.liquidVault, liquidShare),\n                \"FeeDistributor: transfer to LiquidVault failed\"\n            );\n        }\n\n        if (recipients.burnPercentage > 0) {\n            burningShare = recipients.burnPercentage.mul(balance).div(100);\n            infinity.burn(burningShare);\n        }\n\n        secondaryShare = balance.sub(liquidShare).sub(burningShare);\n        if (secondaryShare > 0) {\n            require(\n            infinity.transfer(recipients.secondaryAddress, secondaryShare),\n            \"FeeDistributor: transfer to the secondary address failed\"\n        );\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IInfinityProtocol.sol": {
      "content": "import \"./IERC20.sol\";\n\ninterface IInfinityProtocol is IERC20 {\n    function burn(uint amount) external returns (bool);\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity 0.7.4;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function decimals() external pure returns (uint8);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/InfinityProtocol.sol": {
      "content": "pragma solidity 0.7.4;\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IInfinityProtocol.sol\";\n\ncontract InfinityProtocol is IInfinityProtocol, Context, Ownable {\n\n    using SafeMath for uint;\n    using Address for address;\n\n    mapping (address => uint) private _rOwned;\n    mapping (address => uint) private _tOwned;\n    mapping (address => mapping (address => uint)) private _allowances;\n\n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n    address public feeReceiver;\n    address public router;\n    uint public maxCycles;\n\n    string  private constant _NAME = \"infinityprotocol.io\";\n    string  private constant _SYMBOL = \"INFINITY\";\n    uint8   private constant _DECIMALS = 8;\n\n    uint private constant _MAX = ~uint(0);\n    uint private constant _DECIMALFACTOR = 10 ** uint(_DECIMALS);\n    uint private constant _GRANULARITY = 100;\n\n    uint private _tTotal = 100000000 * _DECIMALFACTOR;\n    uint private _rTotal = (_MAX - (_MAX % _tTotal));\n\n    uint private _tFeeTotal;\n    uint private _tBurnTotal;\n    uint private _infinityCycle;\n\n    uint private _tTradeCycle;\n    uint private _tBurnCycle;\n\n    uint private _BURN_FEE;\n    uint private _FOT_FEE;\n    bool private _feeSet;\n\n    uint private constant _MAX_TX_SIZE = 100000000 * _DECIMALFACTOR;\n\n    constructor (address _router) public {\n        _rOwned[_msgSender()] = _rTotal;\n        router = _router;\n        setMaxCycles(500);\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _NAME;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _SYMBOL;\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return _DECIMALS;\n    }\n\n    function totalSupply() public view override returns (uint) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint) {\n        return _tFeeTotal;\n    }\n\n    function totalBurn() public view returns (uint) {\n        return _tBurnTotal;\n    }\n\n    function setFeeReceiver(address receiver) external onlyOwner() returns (bool) {\n        require(receiver != address(0), \"Zero address not allowed\");\n        feeReceiver = receiver;\n        return true;\n    }\n\n    function totalBurnWithFees() public view returns (uint) {\n        return _tBurnTotal.add(_tFeeTotal);\n    }\n\n    function reflectionFromToken(uint transferAmount, bool deductTransferFee) public view returns(uint) {\n        require(transferAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint rAmount,,,,,) = _getValues(transferAmount);\n            return rAmount;\n        } else {\n            (,uint rTransferAmount,,,,) = _getValues(transferAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint rAmount) public view returns(uint) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeAccount(address account) external onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        require(account != router, 'Not allowed to exclude router');\n        require(account != feeReceiver, \"Can not exclude fee receiver\");\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already included\");\n        for (uint i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _approve(address owner, address spender, uint amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address sender, address recipient, uint amount) private {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        // @dev once all cycles are completed, burn fee will be set to 0 and the protocol\n        // reaches its final phase, in which no further supply elasticity will take place\n        // and fees will stay at 0\n\n        if (sender != owner() && recipient != owner())\n            require(amount <= _MAX_TX_SIZE, \"Transfer amount exceeds the maxTxAmount.\");\n\n        // @dev 50% fee is burn fee, 50% is fot\n        if (_BURN_FEE >= 250) {\n\n            _tTradeCycle = _tTradeCycle.add(amount);\n\n\n        // @dev adjust current burnFee/fotFee depending on the traded tokens\n            if (_tTradeCycle >= (0 * _DECIMALFACTOR) && _tTradeCycle <= (1000000 * _DECIMALFACTOR)) {\n                _setFees(500);\n            } else if (_tTradeCycle > (1000000 * _DECIMALFACTOR) && _tTradeCycle <= (2000000 * _DECIMALFACTOR)) {\n                _setFees(550);\n            }   else if (_tTradeCycle > (2000000 * _DECIMALFACTOR) && _tTradeCycle <= (3000000 * _DECIMALFACTOR)) {\n                _setFees(600);\n            }   else if (_tTradeCycle > (3000000 * _DECIMALFACTOR) && _tTradeCycle <= (4000000 * _DECIMALFACTOR)) {\n                _setFees(650);\n            } else if (_tTradeCycle > (4000000 * _DECIMALFACTOR) && _tTradeCycle <= (5000000 * _DECIMALFACTOR)) {\n                _setFees(700);\n            } else if (_tTradeCycle > (5000000 * _DECIMALFACTOR) && _tTradeCycle <= (6000000 * _DECIMALFACTOR)) {\n                _setFees(750);\n            } else if (_tTradeCycle > (6000000 * _DECIMALFACTOR) && _tTradeCycle <= (7000000 * _DECIMALFACTOR)) {\n                _setFees(800);\n            } else if (_tTradeCycle > (7000000 * _DECIMALFACTOR) && _tTradeCycle <= (8000000 * _DECIMALFACTOR)) {\n                _setFees(850);\n            } else if (_tTradeCycle > (8000000 * _DECIMALFACTOR) && _tTradeCycle <= (9000000 * _DECIMALFACTOR)) {\n                _setFees(900);\n            } else if (_tTradeCycle > (9000000 * _DECIMALFACTOR) && _tTradeCycle <= (10000000 * _DECIMALFACTOR)) {\n                _setFees(950);\n            } else if (_tTradeCycle > (10000000 * _DECIMALFACTOR) && _tTradeCycle <= (11000000 * _DECIMALFACTOR)) {\n                _setFees(1000);\n            } else if (_tTradeCycle > (11000000 * _DECIMALFACTOR) && _tTradeCycle <= (12000000 * _DECIMALFACTOR)) {\n                _setFees(1050);\n            } else if (_tTradeCycle > (12000000 * _DECIMALFACTOR) && _tTradeCycle <= (13000000 * _DECIMALFACTOR)) {\n                _setFees(1100);\n            } else if (_tTradeCycle > (13000000 * _DECIMALFACTOR) && _tTradeCycle <= (14000000 * _DECIMALFACTOR)) {\n                _setFees(1150);\n            } else if (_tTradeCycle > (14000000 * _DECIMALFACTOR)) {\n                _setFees(1200);\n            }\n        }\n\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint transferAmount) private {\n        uint currentRate =  _getRate();\n        (uint rAmount, uint rTransferAmount, uint rFee, uint tTransferAmount, uint transferFee, uint transferBurn) = _getValues(transferAmount);\n        uint rBurn =  transferBurn.mul(currentRate);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\n        _rOwned[feeReceiver] = _rOwned[feeReceiver].add(rFee);\n\n        _burnAndRebase(rBurn, transferFee, transferBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n\n        if (transferFee > 0) {\n            emit Transfer(sender, feeReceiver, transferFee);\n        }\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint transferAmount) private {\n        uint currentRate =  _getRate();\n        (uint rAmount, uint rTransferAmount, uint rFee, uint tTransferAmount, uint transferFee, uint transferBurn) = _getValues(transferAmount);\n        uint rBurn =  transferBurn.mul(currentRate);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\n        _rOwned[feeReceiver] = _rOwned[feeReceiver].add(rFee);\n\n        _burnAndRebase(rBurn, transferFee, transferBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n\n        if (transferFee > 0) {\n            emit Transfer(sender, feeReceiver, transferFee);\n        }\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint transferAmount) private {\n        uint currentRate =  _getRate();\n        (uint rAmount, uint rTransferAmount, uint rFee, uint tTransferAmount, uint transferFee, uint transferBurn) = _getValues(transferAmount);\n        uint rBurn =  transferBurn.mul(currentRate);\n        _tOwned[sender] = _tOwned[sender].sub(transferAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\n        _rOwned[feeReceiver] = _rOwned[feeReceiver].add(rFee);\n\n        _burnAndRebase(rBurn, transferFee, transferBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n\n        if (transferFee > 0) {\n            emit Transfer(sender, feeReceiver, transferFee);\n        }\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint transferAmount) private {\n        uint currentRate =  _getRate();\n        (uint rAmount, uint rTransferAmount, uint rFee, uint tTransferAmount, uint transferFee, uint transferBurn) = _getValues(transferAmount);\n        uint rBurn =  transferBurn.mul(currentRate);\n        _tOwned[sender] = _tOwned[sender].sub(transferAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\n        _rOwned[feeReceiver] = _rOwned[feeReceiver].add(rFee);\n\n        _burnAndRebase(rBurn, transferFee, transferBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n\n        if (transferFee > 0) {\n            emit Transfer(sender, feeReceiver, transferFee);\n        }\n    }\n\n    function _burnAndRebase(uint rBurn, uint transferFee, uint transferBurn) private {\n        _rTotal = _rTotal.sub(rBurn);\n        _tFeeTotal = _tFeeTotal.add(transferFee);\n        _tBurnTotal = _tBurnTotal.add(transferBurn);\n        _tBurnCycle = _tBurnCycle.add(transferBurn).add(transferFee);\n        _tTotal = _tTotal.sub(transferBurn);\n\n\n        // @dev after 1,275,000 tokens burnt, supply is expanded by 500,000 tokens \n        if (_tBurnCycle >= (1275000 * _DECIMALFACTOR)) {\n                //set rebase percent\n                uint _tRebaseDelta = 500000 * _DECIMALFACTOR;\n                _tBurnCycle = _tBurnCycle.sub((1275000 * _DECIMALFACTOR));\n                _tTradeCycle = 0;\n                _setFees(500);\n\n                _rebase(_tRebaseDelta);\n        }\n    }\n\n    function burn(uint amount) external override returns (bool) {\n        address sender  = _msgSender();\n        uint balance = balanceOf(sender);\n        require(balance >= amount, \"Cannot burn more than on balance\");\n        require(sender == feeReceiver, \"Only feeReceiver\");\n\n        uint rBurn =  amount.mul(_getRate());\n        _rTotal = _rTotal.sub(rBurn);\n        _rOwned[sender] = _rOwned[sender].sub(rBurn);\n\n        _tBurnTotal = _tBurnTotal.add(amount);\n        _tTotal = _tTotal.sub(amount);\n\n        emit Transfer(sender, address(0), amount);\n        return true;\n    }\n\n    function _getValues(uint transferAmount) private view returns (uint, uint, uint, uint, uint, uint) {\n        (uint tTransferAmount, uint transferFee, uint transferBurn) = _getTValues(transferAmount, _FOT_FEE, _BURN_FEE);\n        (uint rAmount, uint rTransferAmount, uint rFee) = _getRValues(transferAmount, transferFee, transferBurn);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, transferFee, transferBurn);\n    }\n\n    function _getTValues(uint transferAmount, uint fotFee, uint burnFee) private pure returns (uint, uint, uint) {\n        uint transferFee = ((transferAmount.mul(fotFee)).div(_GRANULARITY)).div(100);\n        uint transferBurn = ((transferAmount.mul(burnFee)).div(_GRANULARITY)).div(100);\n        uint tTransferAmount = transferAmount.sub(transferFee).sub(transferBurn);\n        return (tTransferAmount, transferFee, transferBurn);\n    }\n\n    function _getRValues(uint transferAmount, uint transferFee, uint transferBurn) private view returns (uint, uint, uint) {\n        uint currentRate =  _getRate();\n        uint rAmount = transferAmount.mul(currentRate);\n        uint rFee = transferFee.mul(currentRate);\n        uint rBurn = transferBurn.mul(currentRate);\n        uint rTransferAmount = rAmount.sub(rFee).sub(rBurn);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint) {\n        (uint rSupply, uint tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint, uint) {\n        uint rSupply = _rTotal;\n        uint tSupply = _tTotal;\n        for (uint i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n\n    function _setFees(uint fee) private {\n        require(fee >= 0 && fee <= 1500, \"fee should be in 0 - 15%\");\n        if (_BURN_FEE == fee.div(2)) {\n            return;\n        }\n\n        _BURN_FEE = fee.div(2);\n        _FOT_FEE = fee.div(2);\n    }\n\n    function setInitialFee() external onlyOwner() {\n        require(!_feeSet, \"Initial fee already set\");\n        _setFees(500);\n        _feeSet = true;\n    }\n\n    function setMaxCycles(uint _maxCycles) public onlyOwner() {\n        require(_maxCycles >= _infinityCycle, \"Can not set more than current cycle\");\n        maxCycles = _maxCycles;\n    }\n\n    function getBurnFee() public view returns(uint)  {\n        return _BURN_FEE;\n    }\n\n    function getFee() public view returns(uint)  {\n        return _FOT_FEE;\n    }\n\n    function _getMaxTxAmount() private pure returns(uint) {\n        return _MAX_TX_SIZE;\n    }\n\n    function getCycle() public view returns(uint) {\n        return _infinityCycle;\n    }\n\n    function getBurnCycle() public view returns(uint) {\n        return _tBurnCycle;\n    }\n\n    function getTradedCycle() public view returns(uint) {\n        return _tTradeCycle;\n    }\n\n    function _rebase(uint supplyDelta) internal {\n        _infinityCycle = _infinityCycle.add(1);\n        _tTotal = _tTotal.add(supplyDelta);\n\n        if (_infinityCycle > maxCycles) {\n            _setFees(0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/vaults/HodlerVaultSpace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport \"../interfaces/IERC20.sol\";\n\ncontract HodlerVaultSpace is Ownable {\n    using SafeMath for uint;\n\n    /** Emitted when purchaseLP() is called to track INFINITY amounts */\n    event InfinityTransferred(\n        address from,\n        uint amount,\n        uint percentageAmount\n    );\n\n    /** Emitted when purchaseLP() is called and LP tokens minted */\n    event LPQueued(\n        address hodler,\n        uint amount,\n        uint eth,\n        uint infinityTokens,\n        uint timeStamp\n    );\n\n    /** Emitted when claimLP() is called */\n    event LPClaimed(\n        address hodler,\n        uint amount,\n        uint timestamp,\n        uint donation\n    );\n\n    struct LPbatch {\n        uint amount;\n        uint timestamp;\n        bool claimed;\n    }\n\n    struct HodlerVaultConfig {\n        IERC20 infinityToken;\n        IUniswapV2Router02 uniswapRouter;\n        IUniswapV2Pair tokenPair;\n        address weth;\n        address payable feeReceiver;\n        uint32 stakeDuration;\n        uint8 donationShare; //0-100\n        uint8 purchaseFee; //0-100\n    }\n\n    bool private locked;\n    bool public forceUnlock;\n\n    modifier lock {\n        require(!locked, \"HodlerVaultSpace: reentrancy violation\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    HodlerVaultConfig public config;\n    //Front end can loop through this and inspect if enough time has passed\n    mapping(address => LPbatch[]) public lockedLP;\n    mapping(address => uint) public queueCounter;\n\n    receive() external payable {}\n\n    function maxTokensToInvest() external view returns (uint) {\n        uint totalETH = address(this).balance;\n        if (totalETH == 0) {\n            return 0;\n        }\n\n        uint infinityMaxAllowed;\n\n        (uint reserve1, uint reserve2,) = config.tokenPair.getReserves();\n\n        if (address(config.infinityToken) < address(config.weth)) {\n            infinityMaxAllowed = config.uniswapRouter.quote(\n                totalETH,\n                reserve2,\n                reserve1\n            );\n        } else {\n            infinityMaxAllowed = config.uniswapRouter.quote(\n                totalETH,\n                reserve1,\n                reserve2\n            );\n        }\n\n        return infinityMaxAllowed;\n    }\n\n\n    function getLockedLP(address hodler, uint position)\n        external\n        view\n        returns (\n            address,\n            uint,\n            uint,\n            bool\n        )\n    {\n        LPbatch memory batch = lockedLP[hodler][position];\n        return (hodler, batch.amount, batch.timestamp, batch.claimed);\n    }\n\n    function lockedLPLength(address hodler) external view returns (uint) {\n        return lockedLP[hodler].length;\n    }\n\n    function getStakeDuration() public view returns (uint) {\n        return forceUnlock ? 0 : config.stakeDuration;\n    }\n\n    function seed(\n        uint32 duration,\n        IERC20 infinityToken,\n        address uniswapPair,\n        address uniswapRouter,\n        address payable feeReceiver,\n        uint8 purchaseFee // INFINITY\n    ) external onlyOwner {\n        config.infinityToken = infinityToken;\n        config.uniswapRouter = IUniswapV2Router02(uniswapRouter);\n        config.tokenPair = IUniswapV2Pair(uniswapPair);\n        config.weth = config.uniswapRouter.WETH();\n        setParameters(duration, 0, purchaseFee);\n        setFeeReceiver(feeReceiver);\n    }\n\n    function setParameters(uint32 duration, uint8 donationShare, uint8 purchaseFee)\n        public\n        onlyOwner\n    {\n        require(\n            donationShare <= 100,\n            \"HodlerVaultSpace: donation share % between 0 and 100\"\n        );\n        require(\n            purchaseFee <= 100,\n            \"HodlerVaultSpace: purchase fee share % between 0 and 100\"\n        );\n\n        config.stakeDuration = duration * 1 days;\n        config.donationShare = donationShare;\n        config.purchaseFee = purchaseFee;\n    }\n\n\n    function setFeeReceiver(address payable feeReceiver) public onlyOwner {\n        require(\n            feeReceiver != address(0),\n            \"HodlerVaultSpace: fee receiver is zero address\"\n        );\n\n        config.feeReceiver = feeReceiver;\n    }\n\n    function purchaseLP(uint amount) external lock {\n        require(amount > 0, \"HodlerVaultSpace: INFINITY required to mint LP\");\n        require(config.infinityToken.balanceOf(msg.sender) >= amount, \"HodlerVaultSpace: Not enough INFINITY tokens\");\n        require(config.infinityToken.allowance(msg.sender, address(this)) >= amount, \"HodlerVaultSpace: Not enough INFINITY tokens allowance\");\n\n        uint infinityFee = amount.mul(config.purchaseFee).div(100);\n        uint netInfinity = amount.sub(infinityFee);\n\n        (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();\n\n        uint ethRequired;\n\n        if (address(config.infinityToken) > address(config.weth)) {\n            ethRequired = config.uniswapRouter.quote(\n                netInfinity,\n                reserve2,\n                reserve1\n            );\n        } else {\n            ethRequired = config.uniswapRouter.quote(\n                netInfinity,\n                reserve1,\n                reserve2\n            );\n        }\n\n        require(\n            address(this).balance >= ethRequired,\n            \"HodlerVaultSpace: insufficient ETH on HodlerVaultSpace\"\n        );\n\n        IWETH(config.weth).deposit{ value: ethRequired }();\n        address tokenPairAddress = address(config.tokenPair);\n        IWETH(config.weth).transfer(tokenPairAddress, ethRequired);\n        config.infinityToken.transferFrom(\n            msg.sender,\n            tokenPairAddress,\n            netInfinity\n        );\n\n        uint liquidityCreated = config.tokenPair.mint(address(this));\n\n        if (infinityFee > 0 && config.feeReceiver != address(0)) {\n            config.infinityToken.transferFrom(\n                msg.sender,\n                config.feeReceiver,\n                infinityFee\n            );\n        }\n\n        lockedLP[msg.sender].push(\n            LPbatch({\n                amount: liquidityCreated,\n                timestamp: block.timestamp,\n                claimed: false\n            })\n        );\n\n        emit LPQueued(\n            msg.sender,\n            liquidityCreated,\n            ethRequired,\n            netInfinity,\n            block.timestamp\n        );\n\n        emit InfinityTransferred(msg.sender, netInfinity, infinityFee);\n    }\n\n    //pops latest LP if older than period\n    function claimLP() external {\n        uint next = queueCounter[msg.sender];\n        require(\n            next < lockedLP[msg.sender].length,\n            \"HodlerVaultSpace: nothing to claim.\"\n        );\n        LPbatch storage batch = lockedLP[msg.sender][next];\n        require(\n            block.timestamp - batch.timestamp > getStakeDuration(),\n            \"HodlerVaultSpace: LP still locked.\"\n        );\n        next++;\n        queueCounter[msg.sender] = next;\n        uint donation = (config.donationShare * batch.amount) / 100;\n        batch.claimed = true;\n        emit LPClaimed(msg.sender, batch.amount, block.timestamp, donation);\n        require(\n            config.tokenPair.transfer(address(0), donation),\n            \"HodlerVaultSpace: donation transfer failed in LP claim.\"\n        );\n        require(\n            config.tokenPair.transfer(msg.sender, batch.amount - donation),\n            \"HodlerVaultSpace: transfer failed in LP claim.\"\n        );\n    }\n\n    // Could not be canceled if activated\n    function enableLPForceUnlock() public onlyOwner {\n        forceUnlock = true;\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/vaults/PowerLiquidVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IFeeDistributor.sol\";\n\ncontract PowerLiquidVault is Ownable {\n  /** Emitted when purchaseLP() is called to track ETH amounts */\n  event EthTransferred(\n      address from,\n      uint amount,\n      uint percentageAmount\n  );\n\n  /** Emitted when purchaseLP() is called and LP tokens minted */\n  event LPQueued(\n      address holder,\n      uint amount,\n      uint eth,\n      uint infinityToken,\n      uint timestamp\n  );\n\n  /** Emitted when claimLP() is called */\n  event LPClaimed(\n      address holder,\n      uint amount,\n      uint timestamp,\n      uint exitFee,\n      bool claimed\n  );\n\n  struct LPbatch {\n      address holder;\n      uint amount;\n      uint timestamp;\n      bool claimed;\n  }\n\n  struct LiquidVaultConfig {\n      address infinityToken;\n      IUniswapV2Router02 uniswapRouter;\n      IUniswapV2Pair tokenPair;\n      IFeeDistributor feeDistributor;\n      address weth;\n      uint32 stakeDuration;\n      uint8 donationShare; //0-100\n      uint8 purchaseFee; //0-100\n  }\n  uint public constant MINIMUM_BUY_PRESSURE_AMOUNT = 1e14; //0,0001 ETH minimum\n  bool public forceUnlock;\n  bool private locked;\n\n  modifier lock {\n      require(!locked, \"PowerLiquidVault: reentrancy violation\");\n      locked = true;\n      _;\n      locked = false;\n  }\n\n  LiquidVaultConfig public config;\n\n  mapping(address => LPbatch[]) public lockedLP;\n  mapping(address => uint) public queueCounter;\n\n  function seed(\n      uint32 duration,\n      address infinityToken,\n      address uniswapPair,\n      address uniswapRouter,\n      address feeDistributor,\n      uint8 donationShare, // LP Token\n      uint8 purchaseFee // ETH\n  ) public onlyOwner {\n      config.infinityToken = infinityToken;\n      config.uniswapRouter = IUniswapV2Router02(uniswapRouter);\n      config.tokenPair = IUniswapV2Pair(uniswapPair);\n      config.feeDistributor = IFeeDistributor(feeDistributor);\n      config.weth = config.uniswapRouter.WETH();\n      setParameters(duration, donationShare, purchaseFee);\n  }\n\n  function getStakeDuration() public view returns (uint) {\n      return forceUnlock ? 0 : config.stakeDuration;\n  }\n\n  // Could not be canceled if activated\n  function enableLPForceUnlock() public onlyOwner {\n      forceUnlock = true;\n  }\n\n  function setParameters(uint32 duration, uint8 donationShare, uint8 purchaseFee)\n      public\n      onlyOwner\n  {\n      require(\n          donationShare <= 100,\n          \"PowerLiquidVault: donation share % between 0 and 100\"\n      );\n      require(\n          purchaseFee <= 100,\n          \"PowerLiquidVault: purchase fee share % between 0 and 100\"\n      );\n\n      config.stakeDuration = duration * 1 days;\n      config.donationShare = donationShare;\n      config.purchaseFee = purchaseFee;\n  }\n\n  function purchaseLPFor(address beneficiary) public payable lock {\n      config.feeDistributor.distributeFees();\n      require(msg.value > 0, \"PowerLiquidVault: ETH required to mint INFINITY LP\");\n\n      uint feeValue = (config.purchaseFee * msg.value) / 100;\n      uint exchangeValue = msg.value - feeValue;\n\n      (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();\n\n      uint infinityRequired;\n\n      if (address(config.infinityToken) < address(config.weth)) {\n          infinityRequired = config.uniswapRouter.quote(\n              exchangeValue,\n              reserve2,\n              reserve1\n          );\n      } else {\n          infinityRequired = config.uniswapRouter.quote(\n              exchangeValue,\n              reserve1,\n              reserve2\n          );\n      }\n\n      uint balance = IERC20(config.infinityToken).balanceOf(address(this));\n      require(\n          balance >= infinityRequired,\n          \"PowerLiquidVault: insufficient INFINITY tokens in PowerLiquidVault\"\n      );\n\n      IWETH(config.weth).deposit{ value: exchangeValue }();\n      address tokenPairAddress = address(config.tokenPair);\n      IWETH(config.weth).transfer(tokenPairAddress, exchangeValue);\n      IERC20(config.infinityToken).transfer(\n          tokenPairAddress,\n          infinityRequired\n      );\n\n      uint liquidityCreated = config.tokenPair.mint(address(this));\n\n      lockedLP[beneficiary].push(\n          LPbatch({\n              holder: beneficiary,\n              amount: liquidityCreated,\n              timestamp: block.timestamp,\n              claimed: false\n          })\n      );\n\n      emit LPQueued(\n          beneficiary,\n          liquidityCreated,\n          exchangeValue,\n          infinityRequired,\n          block.timestamp\n      );\n\n      emit EthTransferred(msg.sender, exchangeValue, feeValue);\n  }\n\n  //send ETH to match with INFINITY tokens in PowerLiquidVault\n  function purchaseLP() public payable {\n      purchaseLPFor(msg.sender);\n  }\n\n  function claimLP() public {\n      uint next = queueCounter[msg.sender];\n      require(\n          next < lockedLP[msg.sender].length,\n          \"PowerLiquidVault: nothing to claim.\"\n      );\n      LPbatch storage batch = lockedLP[msg.sender][next];\n      require(\n          block.timestamp - batch.timestamp > getStakeDuration(),\n          \"PowerLiquidVault: LP still locked.\"\n      );\n      next++;\n      queueCounter[msg.sender] = next;\n      uint donation = (config.donationShare * batch.amount) / 100;\n      batch.claimed = true;\n      emit LPClaimed(msg.sender, batch.amount, block.timestamp, donation, batch.claimed);\n      require(\n          config.tokenPair.transfer(address(0), donation),\n          \"PowerLiquidVault: donation transfer failed in LP claim.\"\n      );\n      require(\n          config.tokenPair.transfer(batch.holder, batch.amount - donation),\n          \"PowerLiquidVault: transfer failed in LP claim.\"\n      );\n  }\n\n  function buyPressure() external {\n      uint weiBalance = address(this).balance;\n      require(\n          weiBalance > MINIMUM_BUY_PRESSURE_AMOUNT, \n          \"PowerLiquidVault: ETH amount must be > 0,0001 ETH.\"\n      );\n\n      address[] memory path = new address[](2);\n            path[0] = address(config.weth);\n            path[1] = address(config.infinityToken);\n\n            config.uniswapRouter.swapExactETHForTokens{ value: weiBalance }(\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n  }\n\n  function lockedLPLength(address holder) public view returns (uint) {\n      return lockedLP[holder].length;\n  }\n\n  function getLockedLP(address holder, uint position)\n      public\n      view\n      returns (\n          address,\n          uint,\n          uint,\n          bool\n      )\n  {\n      LPbatch memory batch = lockedLP[holder][position];\n      return (batch.holder, batch.amount, batch.timestamp, batch.claimed);\n  }\n}"
    },
    "contracts/interfaces/IFeeDistributor.sol": {
      "content": "interface IFeeDistributor {\n  function distributeFees() external;\n}"
    },
    "contracts/vaults/LiquidVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IFeeDistributor.sol\";\n\ncontract LiquidVault is Ownable {\n  /** Emitted when purchaseLP() is called to track ETH amounts */\n  event EthTransferred(\n      address from,\n      uint amount,\n      uint percentageAmount\n  );\n\n  /** Emitted when purchaseLP() is called and LP tokens minted */\n  event LPQueued(\n      address holder,\n      uint amount,\n      uint eth,\n      uint infinityToken,\n      uint timestamp\n  );\n\n  /** Emitted when claimLP() is called */\n  event LPClaimed(\n      address holder,\n      uint amount,\n      uint timestamp,\n      uint exitFee,\n      bool claimed\n  );\n\n  struct LPbatch {\n      address holder;\n      uint amount;\n      uint timestamp;\n      bool claimed;\n  }\n\n  struct LiquidVaultConfig {\n      address infinityToken;\n      IUniswapV2Router02 uniswapRouter;\n      IUniswapV2Pair tokenPair;\n      IFeeDistributor feeDistributor;\n      address weth;\n      address payable feeReceiver;\n      uint32 stakeDuration;\n      uint8 donationShare; //0-100\n      uint8 purchaseFee; //0-100\n  }\n  \n  bool public forceUnlock;\n  bool private locked;\n\n  modifier lock {\n      require(!locked, \"LiquidVault: reentrancy violation\");\n      locked = true;\n      _;\n      locked = false;\n  }\n\n  LiquidVaultConfig public config;\n\n  mapping(address => LPbatch[]) public lockedLP;\n  mapping(address => uint) public queueCounter;\n\n  function seed(\n      uint32 duration,\n      address infinityToken,\n      address uniswapPair,\n      address uniswapRouter,\n      address feeDistributor,\n      address payable feeReceiver,\n      uint8 donationShare, // LP Token\n      uint8 purchaseFee // ETH\n  ) public onlyOwner {\n      config.infinityToken = infinityToken;\n      config.uniswapRouter = IUniswapV2Router02(uniswapRouter);\n      config.tokenPair = IUniswapV2Pair(uniswapPair);\n      config.feeDistributor = IFeeDistributor(feeDistributor);\n      config.weth = config.uniswapRouter.WETH();\n      setFeeReceiverAddress(feeReceiver);\n      setParameters(duration, donationShare, purchaseFee);\n  }\n\n  function getStakeDuration() public view returns (uint) {\n      return forceUnlock ? 0 : config.stakeDuration;\n  }\n\n  // Could not be canceled if activated\n  function enableLPForceUnlock() public onlyOwner {\n      forceUnlock = true;\n  }\n\n  function setFeeReceiverAddress(address payable feeReceiver) public onlyOwner {\n      require(\n          feeReceiver != address(0),\n          \"LiquidVault: ETH receiver is zero address\"\n      );\n\n      config.feeReceiver = feeReceiver;\n  }\n\n  function setParameters(uint32 duration, uint8 donationShare, uint8 purchaseFee)\n      public\n      onlyOwner\n  {\n      require(\n          donationShare <= 100,\n          \"LiquidVault: donation share % between 0 and 100\"\n      );\n      require(\n          purchaseFee <= 100,\n          \"LiquidVault: purchase fee share % between 0 and 100\"\n      );\n\n      config.stakeDuration = duration * 1 days;\n      config.donationShare = donationShare;\n      config.purchaseFee = purchaseFee;\n  }\n\n  function purchaseLPFor(address beneficiary) public payable lock {\n      config.feeDistributor.distributeFees();\n      require(msg.value > 0, \"LiquidVault: ETH required to mint INFINITY LP\");\n\n      uint feeValue = (config.purchaseFee * msg.value) / 100;\n      uint exchangeValue = msg.value - feeValue;\n\n      (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();\n\n      uint infinityRequired;\n\n      if (address(config.infinityToken) < address(config.weth)) {\n          infinityRequired = config.uniswapRouter.quote(\n              exchangeValue,\n              reserve2,\n              reserve1\n          );\n      } else {\n          infinityRequired = config.uniswapRouter.quote(\n              exchangeValue,\n              reserve1,\n              reserve2\n          );\n      }\n\n      uint balance = IERC20(config.infinityToken).balanceOf(address(this));\n      require(\n          balance >= infinityRequired,\n          \"LiquidVault: insufficient INFINITY tokens in LiquidVault\"\n      );\n\n      IWETH(config.weth).deposit{ value: exchangeValue }();\n      address tokenPairAddress = address(config.tokenPair);\n      IWETH(config.weth).transfer(tokenPairAddress, exchangeValue);\n      IERC20(config.infinityToken).transfer(\n          tokenPairAddress,\n          infinityRequired\n      );\n\n      uint liquidityCreated = config.tokenPair.mint(address(this));\n      config.feeReceiver.transfer(feeValue);\n\n      lockedLP[beneficiary].push(\n          LPbatch({\n              holder: beneficiary,\n              amount: liquidityCreated,\n              timestamp: block.timestamp,\n              claimed: false\n          })\n      );\n\n      emit LPQueued(\n          beneficiary,\n          liquidityCreated,\n          exchangeValue,\n          infinityRequired,\n          block.timestamp\n      );\n\n      emit EthTransferred(msg.sender, exchangeValue, feeValue);\n  }\n\n  //send ETH to match with INFINITY tokens in LiquidVault\n  function purchaseLP() public payable {\n      purchaseLPFor(msg.sender);\n  }\n\n  function claimLP() public {\n      uint next = queueCounter[msg.sender];\n      require(\n          next < lockedLP[msg.sender].length,\n          \"LiquidVault: nothing to claim.\"\n      );\n      LPbatch storage batch = lockedLP[msg.sender][next];\n      require(\n          block.timestamp - batch.timestamp > getStakeDuration(),\n          \"LiquidVault: LP still locked.\"\n      );\n      next++;\n      queueCounter[msg.sender] = next;\n      uint donation = (config.donationShare * batch.amount) / 100;\n      batch.claimed = true;\n      emit LPClaimed(msg.sender, batch.amount, block.timestamp, donation, batch.claimed);\n      require(\n          config.tokenPair.transfer(address(0), donation),\n          \"LiquidVault: donation transfer failed in LP claim.\"\n      );\n      require(\n          config.tokenPair.transfer(batch.holder, batch.amount - donation),\n          \"LiquidVault: transfer failed in LP claim.\"\n      );\n  }\n\n  function lockedLPLength(address holder) public view returns (uint) {\n      return lockedLP[holder].length;\n  }\n\n  function getLockedLP(address holder, uint position)\n      public\n      view\n      returns (\n          address,\n          uint,\n          uint,\n          bool\n      )\n  {\n      LPbatch memory batch = lockedLP[holder][position];\n      return (batch.holder, batch.amount, batch.timestamp, batch.claimed);\n  }\n}"
    },
    "contracts/vaults/AcceleratorVaultSpace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IFeeDistributor.sol\";\n\ncontract AcceleratorVaultSpace is Ownable {\n    /** Emitted when purchaseLP() is called to track ETH amounts */\n    event EthTransferred(\n        address from,\n        uint amount,\n        uint percentageAmount\n    );\n\n    /** Emitted when purchaseLP() is called and LP tokens minted */\n    event LPQueued(\n        address holder,\n        uint amount,\n        uint eth,\n        uint infinityToken,\n        uint timestamp\n    );\n\n    /** Emitted when claimLP() is called */\n    event LPClaimed(\n        address holder,\n        uint amount,\n        uint timestamp,\n        uint exitFee,\n        bool claimed\n    );\n\n    struct LPbatch {\n        address holder;\n        uint amount;\n        uint timestamp;\n        bool claimed;\n    }\n\n    struct AcceleratorVaultConfig {\n        address infinityToken;\n        IUniswapV2Router02 uniswapRouter;\n        IUniswapV2Pair tokenPair;\n        IFeeDistributor feeDistributor;\n        address weth;\n        address payable ethHodler;\n        uint32 stakeDuration;\n        uint8 donationShare; //0-100\n        uint8 purchaseFee; //0-100\n    }\n\n    bool public forceUnlock;\n    bool private locked;\n\n    modifier lock {\n        require(!locked, \"AcceleratorVaultSpace: reentrancy violation\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    AcceleratorVaultConfig public config;\n\n    mapping(address => LPbatch[]) public lockedLP;\n    mapping(address => uint) public queueCounter;\n\n    function seed(\n        uint32 duration,\n        address infinityToken,\n        address uniswapPair,\n        address uniswapRouter,\n        address feeDistributor,\n        address payable ethHodler,\n        uint8 donationShare, // LP Token\n        uint8 purchaseFee // ETH\n    ) external onlyOwner {\n        config.infinityToken = infinityToken;\n        config.uniswapRouter = IUniswapV2Router02(uniswapRouter);\n        config.tokenPair = IUniswapV2Pair(uniswapPair);\n        config.feeDistributor = IFeeDistributor(feeDistributor);\n        config.weth = config.uniswapRouter.WETH();\n        setEthHodlerAddress(ethHodler);\n        setParameters(duration, donationShare, purchaseFee);\n    }\n\n    function getStakeDuration() public view returns (uint) {\n        return forceUnlock ? 0 : config.stakeDuration;\n    }\n\n    // Could not be canceled if activated\n    function enableLPForceUnlock() external onlyOwner {\n        forceUnlock = true;\n    }\n\n    function setEthHodlerAddress(address payable ethHodler) public onlyOwner {\n        require(\n            ethHodler != address(0),\n            \"AcceleratorVaultSpace: eth receiver is zero address\"\n        );\n\n        config.ethHodler = ethHodler;\n    }\n\n    function setParameters(uint32 duration, uint8 donationShare, uint8 purchaseFee)\n        public\n        onlyOwner\n    {\n        require(\n            donationShare <= 100,\n            \"AcceleratorVaultSpace: donation share % between 0 and 100\"\n        );\n        require(\n            purchaseFee <= 100,\n            \"AcceleratorVaultSpace: purchase fee share % between 0 and 100\"\n        );\n\n        config.stakeDuration = duration * 1 days;\n        config.donationShare = donationShare;\n        config.purchaseFee = purchaseFee;\n    }\n\n    function purchaseLPFor(address beneficiary) public payable lock {\n        config.feeDistributor.distributeFees();\n        require(msg.value > 0, \"AcceleratorVaultSpace: ETH required to mint INFINITY LP\");\n\n        uint feeValue = (config.purchaseFee * msg.value) / 100;\n        uint exchangeValue = msg.value - feeValue;\n\n        (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();\n\n        uint infinityRequired;\n\n        if (address(config.infinityToken) < address(config.weth)) {\n            infinityRequired = config.uniswapRouter.quote(\n                exchangeValue,\n                reserve2,\n                reserve1\n            );\n        } else {\n            infinityRequired = config.uniswapRouter.quote(\n                exchangeValue,\n                reserve1,\n                reserve2\n            );\n        }\n\n        uint balance = IERC20(config.infinityToken).balanceOf(address(this));\n        require(\n            balance >= infinityRequired,\n            \"AcceleratorVaultSpace: insufficient INFINITY tokens in AcceleratorVaultSpace\"\n        );\n\n        IWETH(config.weth).deposit{ value: exchangeValue }();\n        address tokenPairAddress = address(config.tokenPair);\n        IWETH(config.weth).transfer(tokenPairAddress, exchangeValue);\n        IERC20(config.infinityToken).transfer(\n            tokenPairAddress,\n            infinityRequired\n        );\n\n        uint liquidityCreated = config.tokenPair.mint(address(this));\n\n        //ETH receiver is hodler vault here\n        config.ethHodler.transfer(feeValue);\n\n        lockedLP[beneficiary].push(\n            LPbatch({\n                holder: beneficiary,\n                amount: liquidityCreated,\n                timestamp: block.timestamp,\n                claimed: false\n            })\n        );\n\n        emit LPQueued(\n            beneficiary,\n            liquidityCreated,\n            exchangeValue,\n            infinityRequired,\n            block.timestamp\n        );\n\n        emit EthTransferred(msg.sender, exchangeValue, feeValue);\n    }\n\n    //send eth to match with INFINITY tokens in AcceleratorVaultSpace\n    function purchaseLP() external payable {\n        purchaseLPFor(msg.sender);\n    }\n\n    function claimLP() external {\n        uint next = queueCounter[msg.sender];\n        require(\n            next < lockedLP[msg.sender].length,\n            \"AcceleratorVaultSpace: nothing to claim.\"\n        );\n        LPbatch storage batch = lockedLP[msg.sender][next];\n        require(\n            block.timestamp - batch.timestamp > getStakeDuration(),\n            \"AcceleratorVaultSpace: LP still locked.\"\n        );\n        next++;\n        queueCounter[msg.sender] = next;\n        uint donation = (config.donationShare * batch.amount) / 100;\n        batch.claimed = true;\n        emit LPClaimed(msg.sender, batch.amount, block.timestamp, donation, batch.claimed);\n        require(\n            config.tokenPair.transfer(address(0), donation),\n            \"AcceleratorVaultSpace: donation transfer failed in LP claim.\"\n        );\n        require(\n            config.tokenPair.transfer(batch.holder, batch.amount - donation),\n            \"AcceleratorVaultSpace: transfer failed in LP claim.\"\n        );\n    }\n\n    function lockedLPLength(address holder) external view returns (uint) {\n        return lockedLP[holder].length;\n    }\n\n    function getLockedLP(address holder, uint position)\n        external\n        view\n        returns (\n            address,\n            uint,\n            uint,\n            bool\n        )\n    {\n        LPbatch memory batch = lockedLP[holder][position];\n        return (batch.holder, batch.amount, batch.timestamp, batch.claimed);\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(\n        address pair\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/FixedPoint.sol": {
      "content": "pragma solidity >=0.4.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n        uint z;\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n}\n"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.4;\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\nimport '@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol';\nimport \"./interfaces/IERC20.sol\";\n\n\ncontract PriceOracle {\n    using FixedPoint for *;\n    IUniswapV2Pair public immutable pair;\n    uint public multiplier;\n    uint private priceLast;\n    uint public priceCumulativeLast;\n    uint32 public blockTimestampLast;\n\n    address public tokenA;\n    address public tokenB;\n    address public token0;\n\n    constructor(IUniswapV2Pair _pair, address _tokenA, address _tokenB) public {\n        pair = _pair;\n        tokenA = _tokenA;\n        tokenB = _tokenB;\n        (token0, ) = _tokenA < _tokenB\n            ? (_tokenA, _tokenB)\n            : (_tokenB, _tokenA);\n\n        if(token0 == _tokenA) {\n          priceCumulativeLast = _pair.price0CumulativeLast();\n          multiplier = uint(10)**(IERC20(_pair.token0()).decimals());\n        } else {\n          priceCumulativeLast = _pair.price1CumulativeLast();\n          multiplier = uint(10)**(IERC20(_pair.token1()).decimals());\n        }\n    }\n    function update() public returns(uint) {\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, 'PriceOracle: NO_RESERVES');\n\n        uint _priceCumulative;\n        (uint _price0Cumulative, uint _price1Cumulative, uint32 _blockTimestamp) =\n            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n        if(token0 == tokenA) {\n          _priceCumulative = _price0Cumulative;\n        } else {\n          _priceCumulative = _price1Cumulative;\n        }\n        uint _priceCumulativeLast = priceCumulativeLast;\n        uint _blockTimestampLast = blockTimestampLast;\n        uint _price;\n        if (_blockTimestamp != _blockTimestampLast) {\n            _price = FixedPoint.uq112x112(uint224((_priceCumulative - _priceCumulativeLast) /\n                (_blockTimestamp - _blockTimestampLast))).mul(multiplier).decode144();\n            priceLast = _price;\n            priceCumulativeLast = _priceCumulative;\n            blockTimestampLast = _blockTimestamp;\n        } else {\n            _price = priceLast;\n        }\n        return _price;\n    }\n    // note this will always return 0 before update has been called successfully for the first time.\n    function consult() external view returns (uint) {\n        uint _priceCumulative;\n\n        (uint _price0Cumulative, uint _price1Cumulative, uint32 _blockTimestamp) =\n            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n\n        if(token0 == tokenA) {\n          _priceCumulative = _price0Cumulative;\n        } else {\n          _priceCumulative = _price1Cumulative;\n        }\n        uint _priceCumulativeLast = priceCumulativeLast;\n        uint _blockTimestampLast = blockTimestampLast;\n        // most recent price is already calculated.\n        if (_blockTimestamp == _blockTimestampLast) {\n            return priceLast;\n        }\n        return FixedPoint.uq112x112(uint224((_priceCumulative - _priceCumulativeLast) / \n            (_blockTimestamp - _blockTimestampLast))).mul(multiplier).decode144();\n    }\n    function updateAndConsult() external returns (uint) {\n        return update();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}