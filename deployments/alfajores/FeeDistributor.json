{
  "address": "0x5101aB08b5097bb6bb46aBF51f59a34ede459094",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infinity",
      "outputs": [
        {
          "internalType": "contract IInfinityProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address",
          "name": "liquidVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondaryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidVaultShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_infinity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondaryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidVaultShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnPercentage",
          "type": "uint256"
        }
      ],
      "name": "seed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2250d9af6f3d661df81cd0ac2b5f60e3c122373a42a1055e31e558b2b8c256d",
  "receipt": {
    "to": null,
    "from": "0x4EDd89Ef21105a3114ED0992b672F9c37bA4624d",
    "contractAddress": "0x5101aB08b5097bb6bb46aBF51f59a34ede459094",
    "transactionIndex": 2,
    "gasUsed": "674374",
    "logsBloom": "0x
    "blockHash": "0x3f6621d2901b942014c4508a432addfebef8b7370069078e8c634015dc7a8d40",
    "transactionHash": "0xa2250d9af6f3d661df81cd0ac2b5f60e3c122373a42a1055e31e558b2b8c256d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5972559,
        "transactionHash": "0xa2250d9af6f3d661df81cd0ac2b5f60e3c122373a42a1055e31e558b2b8c256d",
        "address": "0x5101aB08b5097bb6bb46aBF51f59a34ede459094",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004edd89ef21105a3114ed0992b672f9c37ba4624d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x3f6621d2901b942014c4508a432addfebef8b7370069078e8c634015dc7a8d40"
      }
    ],
    "blockNumber": 5972559,
    "cumulativeGasUsed": "1066859",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "50935558cf5835f525f697d3157617bd",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinity\",\"outputs\":[{\"internalType\":\"contract IInfinityProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_infinity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercentage\",\"type\":\"uint256\"}],\"name\":\"seed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IInfinityProtocol.sol\\\";\\n\\ncontract FeeDistributor is Ownable {\\n    using SafeMath for uint;\\n\\n    struct FeeRecipient {\\n        address liquidVault;\\n        address secondaryAddress;\\n        uint256 liquidVaultShare; //percentage between 0 and 100\\n        uint256 burnPercentage;\\n    }\\n    \\n    IInfinityProtocol public infinity;\\n    FeeRecipient public recipients;\\n\\n    bool public initialized;\\n\\n    uint private constant MINIMUM_AMOUNT = 1e8;\\n\\n    modifier seeded {\\n        require(\\n            initialized,\\n            \\\"FeeDistributor: Fees cannot be distributed until Distributor seeded.\\\"\\n        );\\n        _;\\n    }\\n\\n    function seed(\\n        address _infinity,\\n        address _vault,\\n        address _secondaryAddress,\\n        uint _liquidVaultShare,\\n        uint _burnPercentage\\n    ) external onlyOwner {\\n        require(\\n            _liquidVaultShare.add(_burnPercentage) <= 100,\\n            \\\"FeeDistributor: liquidVault + burnPercentage incorrect sets\\\"\\n        );\\n        infinity = IInfinityProtocol(_infinity);\\n        recipients.liquidVault = _vault;\\n        recipients.secondaryAddress = _secondaryAddress;\\n        recipients.liquidVaultShare = _liquidVaultShare;\\n        recipients.burnPercentage = _burnPercentage;\\n        initialized = true;\\n    }\\n\\n    function distributeFees() external seeded {\\n        uint balance = infinity.balanceOf(address(this));\\n\\n        if (balance < MINIMUM_AMOUNT) {\\n            return;\\n        }\\n\\n        uint liquidShare;\\n        uint burningShare;\\n        uint secondaryShare;\\n\\n        if (recipients.liquidVaultShare > 0) {\\n            liquidShare = recipients.liquidVaultShare.mul(balance).div(100);\\n\\n            require(\\n                infinity.transfer(recipients.liquidVault, liquidShare),\\n                \\\"FeeDistributor: transfer to LiquidVault failed\\\"\\n            );\\n        }\\n\\n        if (recipients.burnPercentage > 0) {\\n            burningShare = recipients.burnPercentage.mul(balance).div(100);\\n            infinity.burn(burningShare);\\n        }\\n\\n        secondaryShare = balance.sub(liquidShare).sub(burningShare);\\n        if (secondaryShare > 0) {\\n            require(\\n            infinity.transfer(recipients.secondaryAddress, secondaryShare),\\n            \\\"FeeDistributor: transfer to the secondary address failed\\\"\\n        );\\n        }\\n    }\\n}\",\"keccak256\":\"0x98e4d2c721c9ac99ab5162a3b5d2f14ee03f8a1ea29db1c6fb3237c648726d5a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.7.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa95234db08e761bb358798187dbfa2194379e06ee7ab5c3fe147b21481e5d59d\"},\"contracts/interfaces/IInfinityProtocol.sol\":{\"content\":\"import \\\"./IERC20.sol\\\";\\n\\ninterface IInfinityProtocol is IERC20 {\\n    function burn(uint amount) external returns (bool);\\n}\",\"keccak256\":\"0xfc216ba0aa36716553d0afecded82c2fc2170bc121dd0f4c29b7f8ffae98a009\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b610ad08061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461012f578063bb57ad2014610153578063befe0e791461015b578063f2fde38b1461016357610088565b80630e57d4ce1461008d578063158ef93e146100c7578063715018a6146100e35780637a0f6020146100ed575b600080fd5b610095610189565b604080516001600160a01b03958616815293909416602084015282840191909152606082015290519081900360800190f35b6100cf6101a8565b604080519115158252519081900360200190f35b6100eb6101b1565b005b6100eb600480360360a081101561010357600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135906080013561026f565b610137610384565b604080516001600160a01b039092168252519081900360200190f35b6100eb610393565b6101376106c7565b6100eb6004803603602081101561017957600080fd5b50356001600160a01b03166106d6565b6002546003546004546005546001600160a01b03938416939092169184565b60065460ff1681565b6101b96107ea565b6001600160a01b03166101ca610384565b6001600160a01b031614610225576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6102776107ea565b6001600160a01b0316610288610384565b6001600160a01b0316146102e3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60646102ef83836107ee565b111561032c5760405162461bcd60e51b815260040180806020018281038252603b815260200180610a28603b913960400191505060405180910390fd5b600180546001600160a01b03199081166001600160a01b03978816178255600280548216968816969096179095556003805490951693909516929092179092556004919091556005556006805460ff19169091179055565b6000546001600160a01b031690565b60065460ff166103d45760405162461bcd60e51b81526004018080602001828103825260448152602001806109956044913960600191505060405180910390fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b505190506305f5e10081101561045f57506106c5565b600454600090819081901561054a57600454610488906064906104829087610851565b906108aa565b6001546002546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193965091169163a9059cbb916044808201926020929091908290030181600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b505050506040513d602081101561050d57600080fd5b505161054a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806109fa602e913960400191505060405180910390fd5b600554156105e457600554610566906064906104829087610851565b60015460408051630852cd8d60e31b81526004810184905290519294506001600160a01b03909116916342966c68916024808201926020929091908290030181600087803b1580156105b757600080fd5b505af11580156105cb573d6000803e3d6000fd5b505050506040513d60208110156105e157600080fd5b50505b6105f8826105f28686610911565b90610911565b905080156106c0576001546003546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b505050506040513d602081101561068357600080fd5b50516106c05760405162461bcd60e51b8152600401808060200182810382526038815260200180610a636038913960400191505060405180910390fd5b505050505b565b6001546001600160a01b031681565b6106de6107ea565b6001600160a01b03166106ef610384565b6001600160a01b03161461074a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661078f5760405162461bcd60e51b815260040180806020018281038252602681526020018061096f6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600082820183811015610848576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826108605750600061084b565b8282028284828161086d57fe5b04146108485760405162461bcd60e51b81526004018080602001828103825260218152602001806109d96021913960400191505060405180910390fd5b6000808211610900576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161090957fe5b049392505050565b600082821115610968576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734665654469737472696275746f723a20466565732063616e6e6f7420626520646973747269627574656420756e74696c204469737472696275746f72207365656465642e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774665654469737472696275746f723a207472616e7366657220746f204c69717569645661756c74206661696c65644665654469737472696275746f723a206c69717569645661756c74202b206275726e50657263656e7461676520696e636f727265637420736574734665654469737472696275746f723a207472616e7366657220746f20746865207365636f6e646172792061646472657373206661696c6564a2646970667358221220d18203bcd6d9736d955bada49fe0190283aedd5a1d36f90eebf0abb683c6d71364736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461012f578063bb57ad2014610153578063befe0e791461015b578063f2fde38b1461016357610088565b80630e57d4ce1461008d578063158ef93e146100c7578063715018a6146100e35780637a0f6020146100ed575b600080fd5b610095610189565b604080516001600160a01b03958616815293909416602084015282840191909152606082015290519081900360800190f35b6100cf6101a8565b604080519115158252519081900360200190f35b6100eb6101b1565b005b6100eb600480360360a081101561010357600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135906080013561026f565b610137610384565b604080516001600160a01b039092168252519081900360200190f35b6100eb610393565b6101376106c7565b6100eb6004803603602081101561017957600080fd5b50356001600160a01b03166106d6565b6002546003546004546005546001600160a01b03938416939092169184565b60065460ff1681565b6101b96107ea565b6001600160a01b03166101ca610384565b6001600160a01b031614610225576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6102776107ea565b6001600160a01b0316610288610384565b6001600160a01b0316146102e3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60646102ef83836107ee565b111561032c5760405162461bcd60e51b815260040180806020018281038252603b815260200180610a28603b913960400191505060405180910390fd5b600180546001600160a01b03199081166001600160a01b03978816178255600280548216968816969096179095556003805490951693909516929092179092556004919091556005556006805460ff19169091179055565b6000546001600160a01b031690565b60065460ff166103d45760405162461bcd60e51b81526004018080602001828103825260448152602001806109956044913960600191505060405180910390fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561041f57600080fd5b505afa158015610433573d6000803e3d6000fd5b505050506040513d602081101561044957600080fd5b505190506305f5e10081101561045f57506106c5565b600454600090819081901561054a57600454610488906064906104829087610851565b906108aa565b6001546002546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193965091169163a9059cbb916044808201926020929091908290030181600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b505050506040513d602081101561050d57600080fd5b505161054a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806109fa602e913960400191505060405180910390fd5b600554156105e457600554610566906064906104829087610851565b60015460408051630852cd8d60e31b81526004810184905290519294506001600160a01b03909116916342966c68916024808201926020929091908290030181600087803b1580156105b757600080fd5b505af11580156105cb573d6000803e3d6000fd5b505050506040513d60208110156105e157600080fd5b50505b6105f8826105f28686610911565b90610911565b905080156106c0576001546003546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561065957600080fd5b505af115801561066d573d6000803e3d6000fd5b505050506040513d602081101561068357600080fd5b50516106c05760405162461bcd60e51b8152600401808060200182810382526038815260200180610a636038913960400191505060405180910390fd5b505050505b565b6001546001600160a01b031681565b6106de6107ea565b6001600160a01b03166106ef610384565b6001600160a01b03161461074a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661078f5760405162461bcd60e51b815260040180806020018281038252602681526020018061096f6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600082820183811015610848576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826108605750600061084b565b8282028284828161086d57fe5b04146108485760405162461bcd60e51b81526004018080602001828103825260218152602001806109d96021913960400191505060405180910390fd5b6000808211610900576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161090957fe5b049392505050565b600082821115610968576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734665654469737472696275746f723a20466565732063616e6e6f7420626520646973747269627574656420756e74696c204469737472696275746f72207365656465642e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774665654469737472696275746f723a207472616e7366657220746f204c69717569645661756c74206661696c65644665654469737472696275746f723a206c69717569645661756c74202b206275726e50657263656e7461676520696e636f727265637420736574734665654469737472696275746f723a207472616e7366657220746f20746865207365636f6e646172792061646472657373206661696c6564a2646970667358221220d18203bcd6d9736d955bada49fe0190283aedd5a1d36f90eebf0abb683c6d71364736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1749,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "infinity",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IInfinityProtocol)4419"
      },
      {
        "astId": 1751,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "recipients",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(FeeRecipient)1747_storage"
      },
      {
        "astId": 1753,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInfinityProtocol)4419": {
        "encoding": "inplace",
        "label": "contract IInfinityProtocol",
        "numberOfBytes": "20"
      },
      "t_struct(FeeRecipient)1747_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.FeeRecipient",
        "members": [
          {
            "astId": 1740,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "liquidVault",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1742,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "secondaryAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1744,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "liquidVaultShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1746,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "burnPercentage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}